.\" -*- nroff -*-
.\"
.TH IBV_CREATE_CQ_EX 3 2016-2-10 libibverbs "Libibverbs Programmer's Manual"
.SH "NAME"
ibv_create_cq_ex \- create a completion queue (CQ)
.SH "SYNOPSIS"
.nf
.B #include <infiniband/verbs.h>
.sp
.BI "struct ibv_cq *ibv_create_cq_ex(struct ibv_context " "*context" ",
.BI "                                struct ibv_cq_init_attr_ex " "*cq_attr" );
.fi
.SH "DESCRIPTION"
.B ibv_create_cq_ex()
creates a completion queue (CQ) for RDMA device context
.I context\fR.
The argument
.I cq_attr
is a pointer to struct ibv_create_cq_attr_ex as defined in <infiniband/verbs.h>.
.PP
.nf
struct ibv_cq_init_attr_ex {
.in +8
int                     cqe;               /* Minimum number of entries required for CQ */
void                    *cq_context;       /* Consumer-supplied context returned for completion events */
struct ibv_comp_channel *channel;          /* Completion channel where completion events will be queued. May be NULL if completion events will not be used. */
int                     comp_vector;       /* Completion vector used to signal completion events. Must be >= 0 and < context->num_comp_vectors. */
uint64_t                wc_flags;          /* The wc_flags that should be returned in ibv_poll_cq_ex. Or'ed bit of enum ibv_wc_flags_ex. */
uint32_t                comp_mask;         /* compatibility mask (extended verb). Or'd flags of enum ibv_cq_init_attr_mask */
uint32_t                flags;             /* create cq flags - one or more flags from enum ibv_create_cq_attr_flags */
.in -8
};

enum ibv_wc_flags_ex {
        IBV_WC_EX_GRH                        = 1 << 0,  /* Output only */
        IBV_WC_EX_IMM                        = 1 << 1,  /* Output only */
        IBV_WC_EX_CSUM_OK                    = 1 << 2,  /* Output only */
        IBV_WC_EX_INV                        = 1 << 3,  /* Output only */
        IBV_WC_EX_WITH_BYTE_LEN              = 1 << 4,  /* Require byte len in WC */
        IBV_WC_EX_WITH_IMM                   = 1 << 5,  /* Require immediate in WC */
        IBV_WC_EX_WITH_QP_NUM                = 1 << 6,  /* Require QP number in WC */
        IBV_WC_EX_WITH_SRC_QP                = 1 << 7,  /* Require source QP in WC */
        IBV_WC_EX_WITH_PKEY_INDEX            = 1 << 8,  /* Require pkey index in WC */
        IBV_WC_EX_WITH_SLID                  = 1 << 9,  /* Require slid in WC */
        IBV_WC_EX_WITH_SL                    = 1 << 10, /* Require sl in WC */
        IBV_WC_EX_WITH_DLID_PATH_BITS        = 1 << 11, /* Require dlid path bits in WC */
        IBV_WC_EX_WITH_COMPLETION_TIMESTAMP  = 1 << 12, /* Require completion timestamp in WC */
};


enum ibv_cq_init_attr_mask {
        IBV_CQ_INIT_ATTR_FLAGS               = 1 << 0,
};
.SH "RETURN VALUE"
.B ibv_create_cq_ex()
returns a pointer to the CQ, or NULL if the request fails.
.SH "NOTES"
.B ibv_create_cq_ex()
may create a CQ with size greater than or equal to the requested
size. Check the cqe attribute in the returned CQ for the actual size.
.PP
CQ should be destroyed with ibv_destroy_cq.
.PP
.SH "SEE ALSO"
.BR ibv_create_cq (3),
.BR ibv_destroy_cq (3),
.BR ibv_resize_cq (3),
.BR ibv_req_notify_cq (3),
.BR ibv_ack_cq_events (3),
.BR ibv_create_qp (3)
.SH "AUTHORS"
.TP
Matan Barak <matanb@mellanox.com>
.TP
Yishai Hadas <yishaih@mellanox.com>
